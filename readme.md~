# Replication instructions for ``Estimating Crisis Signaling Games in International Relations: Problems and Solutions''
# Casey Crisman-Cox and Michael Gibilisco
# July 1, 2019

## A note for replicators
Conducting constrained maximum likelihood estimation (CMLE)  requires specialized (open source) software that we are only able to run using the Ubuntu Linux operating system. 
We provide detailed setup instructions below. All our PL, NPL, and tML results are based solely on `R` and can be replicated without issue on any operating system 

## Replication package contents
Files marked with (U) require Ubuntu.

- Background information
    - `readme.txt`: plain text readme
    - `readme.md`: plain text readme
    - `readme.pdf`: This document in pdf format
    - `dataSources.pdf`: List of complete references for all data used in this archive
- Installation files
    - `CMLE_setup.sh` (U):  A bash script to be run once the live session of Ubuntu 18.04.1 is booted.  This will install all the necessary outside software to replicate the results. (Internet connection is required)
    - `Install_Rpackages.r`: An R script that installs all the `R` packages used here.
- Support functions
    - `signalingFunctions_main.r`:
	- `gradientFunctions.r`:
	- `CMLE_functions.R`:
	- `CMLE_functions.py` (U):
	- `CMLE_MonteCarlo_meq_support.py` (U):
	- `CMLE_MonteCarlo_meq_support.r` (U):
	- `CMLE_MonteCarlo_unique_support.py` (U):
	- `CMLE_MonteCarlo_unique_support.r` (U):
	- `CMLE_estimation_support.r` (U):
	- `CMLE_estimation_support.py` (U):	
	- `parmap.py` (U):
- Monte Carlos 
    - `MonteCarloMEQ.r`: Runs the Monte Carlo simulations when data generating game has multiple equlibiria. Outputs `MonteCarloResults_MEQ.rdata`.
    - `MonteCarloUnique.r`: Runs the Monte Carlo simulations when data generating game a unique equlibiria. Outputs `MonteCarloResults_Unique.rdata`.
    - `CMLE_MonteCarlo_meq.py` (U): Runs the Monte Carlo simulations for the CMLE when data generating game has multiple equlibiria.
	- `AnalyzeSimulationMEQ.r`:
	- `AnalyzeSimulationUnique.r`:
	- `eqGraph.r`: Produces the equilibrium correspondences in Figure 1.
- Estimation
    - `SanctionsDataSet.rdata`: Economic sanctions data 
	- `estimation.R`:
	- `CMLE_estimation.py` (U):
	- `standardErrors.R`:
	- `ComparativeStatics.R`
- Output files

## Ubuntu 18.04.1 setup 
All applications of the CMLE to either simulation or actual data was done with Ubuntu 18.04.1 (Bionic Beaver).
The automatic differentiation (AD) software is only tested for Ubuntu operating systems.
To allow for replication we provide these instructions to setup a "Live" version of Ubuntu 18.04.1.
Any code that does not involve fitting a model using CMLE can be done from any computer with `R`.
These steps borrow heavily from the steps listed in Crisman-Cox and Gibilisco (2017).

To run a "Live" session of  Ubuntu 18.04.01:


1. Download the Ubuntu 18.04.1 CD imagine (.iso file) and an application for create a "bootable" flash drive
    - The iso file can be downloaded from: [this link](http://old-releases.ubuntu.com/releases/18.04.1/ubuntu-18.04.1-desktop-amd64.iso)
    - Windows users can use the software application Rufus  ([link](https://rufus.akeo.ie/))
	- Mac users can use the application Etcher ([link](https://www.balena.io/etcher/))
2. Create the bootable drive
    - If using Rufus on Windows you can follow Dell's instructions ([link](http://www.dell.com/support/article/us/en/04/SLN296810/creating-a-bootable-usb-device-with-rufus-for-updating-dell-poweredge-servers?lang=EN))
	- If using Etcher on Mac you can follow Ubuntu's own tutorial ([link](https://tutorials.ubuntu.com/tutorial/tutorial-create-a-usb-stick-on-macos#0))
3. Turn off your computer, insert the bootable flash drive, and power up the machine 	
    - Enter your machine's boot menu by pressing the appropriate key repeatedly  (the button to activate the boot menu varies with computer make and models -- common keys include F12 (DELL, Most ACERs),   F8 (Most ASUS), ESC (HP and some ASUS), OPTION (Mac).  See [this link](http://www.disk-image.com/faq-bootmenu.htm) for more information).
4. Select the option to boot from USB
5.  Select the option to "Try Ubuntu." Warning: selecting "Install" can lead to a complete overwrite of your computer.  Stick with "Try."
6. Download the replication package  (scroll your cursor to the upper left corner where it says "Activities" and then select the firefox icon to access the internet)
7. Extract the replication package to the home folder (`/home/ubuntu`)
7.  Open the file explorer (scroll your cursor to the upper left corner where it says "Activities" and then select the files icon that appears) and navigate to the Replication folder (`/home/ubuntu/Replication`)
8. Open a terminal by right-clicking against the folder background and selecting "Open In Terminal."
8. Run the file ``CMLE_setup.sh`` using the command
```bash
bash CMLE_setup.sh
```
This step may take up to 30 minutes depending on network speed and you may be prompted to press "Enter" at one or more points in the process. As software is downloaded, updated, or installed you may notice various background notifications appearing.  These are normal and can be ignored.
9. Once this script has completed we are ready to reproduce all the results. 

## Instructions to replicate Figure 2
To produce Figure 2, open a terminal from within the Replication folder (see steps 8-9)  and run the command:
```bash
Rscript MonteCarloMEQ.r
```
This outputs ``figure2.pdf``.

## Instructions for replicating the Monte Carlos
To produce the Monte Carlo results for the PL, NPL, and tML, open a terminal from within the Replication folder (see steps 8-9)  and run the command:
```bash
Rscript MonteCarloMEQ.r
Rscript MonteCarloUnique.r
```
These will generate the output files ``MonteCarloResults_MEQ.rdata`` and ``MonteCarloResults_Unique.rdata``, respectively.

To produce the Monte Carlo results for the CMLE, run the following commands.
```bash
python CMLE_MonteCarlo_meq.py
python CMLE_MonteCarlo_unique.py
```
These two scripts produce the output files `CMLE_meq.rdata` and `CMLE_unique.rdata`, respectively.
With these four outputs in hand we can replicate Figures 3 and 4, with the commands:
```bash
Rscript analyzeSimulationMEQ.r
Rscript analyzeSimulationUnique.r
```
These will output `figure3.pdf` and `figure4.pdf`, respectively.





## Instructions for replicating the estimates and standard errors



## Instructions for replicating the comparative statics

To run the estimation procedure navigate to the folder `/home/xubuntu/Replication/Ubuntu Optimization/UbuntuOptimization`.
Open a terminal and run
```bash
bash runEstimation.sh
```
This script will convert the data (by running `convertData_R2py.py`) and run the estimation (by running `mainModelEstimation.py`).
To just run the estimation, open a terminal and run
```bash
python mainModelEstimationCode.py
```
In addition to estimating the coefficients, `mainModelEstimation.py` also exports the coefficients to `/home/xubuntu/Replication/Paper Results/ReplicationOutput.rdata`.

## Instructions for replicating the tables and figures
To replicate the tables and figures, navigate to `/home/xubuntu/Replication/Paper Results/`. These are all R files and can be run within any standard R environment or through the terminal.

- `analyticalSE_code.r` reads in the model coefficients and exports the coefficients and standard errors to `mainModelResults.rdata`.  Source this file in R or run
```bash
Rscript analyticalSE_code.r
```
in the terminal
- `Section4/Table1.r` replicates Table 1.  This file can be sourced in R or by opening a terminal in the `Section4` folder and running
```bash
Rscript Table1.r
```
- `Section5/Section5.0/replication5.0.R` produces and Figure 1.  This file can be sourced in R or by opening a terminal in the `Section5.0` folder and running
```bash
Rscript replication5.0.R
```
- `Section5/Section5.1/Table2.R` replicates Table 2.  This file can be sourced in R or by opening a terminal in the `Section5.1` folder and running
```bash
Rscript Table3.R
```
- `Section5/Section5.2/replication5.2.R` generates the information used to create Figure 2. As discussed above, we draw the regression tree in LaTeX using the TikZ to produce a more customized figure, `Figure2.pdf` looks different from this image, but the information is identical.  It also produces the information for Table 3 and prints it to the screen.  This file can be sourced in R or by opening a terminal in the `Section5.2` folder and running.
```bash
Rscript replication5.2.R
```
- `Section5/Section5.3/replication5.3.R` replicates Figures 3 and 4.  This file can be sourced in R or by opening a terminal in the `Section5.3` folder and running
```bash
Rscript replication5.3.R
```
- `conductAnalysis.sh` runs all the above files on this list and prints the output to screen. Run this file by opening a opening a terminal in this folder and running
```bash
bash conductAnalysis.sh
```

## References

1.Crisman-Cox, Casey, and Michael Gibilisco. 2017. "Replication Data for
'Audience Costs and the Dynamics of War and Peace'." Harvard Dataverse.[doi:10.7910/DVN/XBNJD9](doi:10.7910/DVN/XBNJD9).
